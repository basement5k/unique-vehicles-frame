import { NextRequest } from 'next/server';\nimport { put } from '@vercel/blob';\nimport { validateFrameMessage, frameResponse, errorResponse, getSessionData, updateSessionData, ratelimit } from '@/lib/utils';\nimport { URLPattern } from 'next/server';\n\nexport const config = {\n  api: {\n    bodyParser: {\n      sizeLimit: '10mb',\n    },\n  },\n};\n\nexport async function POST(req: NextRequest) {\n  try {\n    // Apply rate limiting\n    const ip = req.headers.get('x-forwarded-for') || 'anonymous';\n    const { success: ratelimitSuccess } = await ratelimit.limit(ip);\n    \n    if (!ratelimitSuccess) {\n      return errorResponse('Rate limit exceeded. Please try again later.', 429);\n    }\n\n    // Parse the frame message\n    const body = await req.json();\n    const frameMessage = await validateFrameMessage(body);\n\n    if (!frameMessage) {\n      return errorResponse('Invalid frame message');\n    }\n\n    const { untrustedData } = frameMessage;\n    const { fid, state, inputText } = untrustedData;\n    const frameHost = process.env.FRAME_HOST || 'https://unique-vehicles-frame.vercel.app';\n    \n    // Parse state\n    const stateParams = new URLSearchParams(state?.toString() || '');\n    const sessionId = stateParams.get('sessionId') || '';\n    const mode = stateParams.get('mode') || 'upload';\n    const sessionData = sessionId ? await getSessionData(sessionId) : null;\n    \n    if (!sessionData) {\n      return frameResponse({\n        image: `${frameHost}/api/images/error`,\n        postUrl: `${frameHost}/api/capture-choice`,\n        buttons: ['Try Again'],\n      });\n    }\n\n    // Get the image URL\n    let imageUrl = inputText;\n    \n    // Validate the image URL\n    if (!imageUrl || !isValidUrl(imageUrl)) {\n      return frameResponse({\n        image: `${frameHost}/api/images/invalid-url`,\n        postUrl: `${frameHost}/api/upload-image`,\n        buttons: ['Try Again'],\n        input: { text: 'Please enter a valid image URL' },\n        state: { mode, sessionId },\n      });\n    }\n\n    try {\n      // Download and reupload the image to Vercel Blob for security\n      const response = await fetch(imageUrl);\n      if (!response.ok) throw new Error('Failed to fetch image');\n      \n      const imageBuffer = await response.arrayBuffer();\n      const contentType = response.headers.get('content-type') || 'image/jpeg';\n      \n      // Validate image content type\n      if (!contentType.startsWith('image/')) {\n        return frameResponse({\n          image: `${frameHost}/api/images/invalid-image`,\n          postUrl: `${frameHost}/api/upload-image`,\n          buttons: ['Try Again'],\n          input: { text: 'Please enter a valid image URL' },\n          state: { mode, sessionId },\n        });\n      }\n      \n      // Upload to Vercel Blob\n      const maxSizeMB = parseInt(process.env.MAX_IMAGE_SIZE || '10');\n      const maxSizeBytes = maxSizeMB * 1024 * 1024;\n      \n      if (imageBuffer.byteLength > maxSizeBytes) {\n        return frameResponse({\n          image: `${frameHost}/api/images/too-large`,\n          postUrl: `${frameHost}/api/upload-image`,\n          buttons: ['Try Again'],\n          input: { text: `Image too large. Max size is ${maxSizeMB}MB` },\n          state: { mode, sessionId },\n        });\n      }\n      \n      const blob = await put(`vehicle-${fid}-${Date.now()}.jpg`, imageBuffer, {\n        contentType,\n        access: 'public',\n      });\n      \n      // Store the image URL in the session\n      await updateSessionData(sessionId, {\n        imageUrl: blob.url,\n        step: 'details',\n      });\n      \n      // Redirect to the vehicle details form\n      return frameResponse({\n        image: `${frameHost}/api/images/preview?url=${encodeURIComponent(blob.url)}`,\n        postUrl: `${frameHost}/api/vehicle-details`,\n        buttons: ['Continue to Details'],\n        state: { sessionId },\n      });\n    } catch (error) {\n      console.error('Error processing image:', error);\n      return frameResponse({\n        image: `${frameHost}/api/images/error`,\n        postUrl: `${frameHost}/api/upload-image`,\n        buttons: ['Try Again'],\n        input: { text: 'Failed to process image. Try again with a different URL' },\n        state: { mode, sessionId },\n      });\n    }\n  } catch (error) {\n    console.error('Error in upload-image endpoint:', error);\n    return errorResponse('An error occurred. Please try again later.', 500);\n  }\n}\n\n// Helper to validate URL\nfunction isValidUrl(urlString: string): boolean {\n  try {\n    const url = new URL(urlString);\n    return url.protocol === 'http:' || url.protocol === 'https:';\n  } catch (e) {\n    return false;\n  }\n}