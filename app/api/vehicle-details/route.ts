import { NextRequest } from 'next/server';\nimport { validateFrameMessage, frameResponse, errorResponse, getSessionData, updateSessionData, ratelimit } from '@/lib/utils';\nimport { URLPattern } from 'next/server';\n\nexport async function POST(req: NextRequest) {\n  try {\n    // Apply rate limiting\n    const ip = req.headers.get('x-forwarded-for') || 'anonymous';\n    const { success: ratelimitSuccess } = await ratelimit.limit(ip);\n    \n    if (!ratelimitSuccess) {\n      return errorResponse('Rate limit exceeded. Please try again later.', 429);\n    }\n\n    // Parse the frame message\n    const body = await req.json();\n    const frameMessage = await validateFrameMessage(body);\n\n    if (!frameMessage) {\n      return errorResponse('Invalid frame message');\n    }\n\n    const { untrustedData } = frameMessage;\n    const { state, inputText } = untrustedData;\n    const frameHost = process.env.FRAME_HOST || 'https://unique-vehicles-frame.vercel.app';\n    \n    // Parse state\n    const stateParams = new URLSearchParams(state?.toString() || '');\n    const sessionId = stateParams.get('sessionId') || '';\n    const step = stateParams.get('step') || 'details';\n    const sessionData = sessionId ? await getSessionData(sessionId) : null;\n    \n    if (!sessionData || !sessionData.imageUrl) {\n      return frameResponse({\n        image: `${frameHost}/api/images/error`,\n        postUrl: `${frameHost}/api/capture-choice`,\n        buttons: ['Start Over'],\n      });\n    }\n\n    // Process form steps\n    if (step === 'details') {\n      // First step: Vehicle description\n      if (inputText && inputText.trim()) {\n        await updateSessionData(sessionId, {\n          vehicleDetails: { ...sessionData.vehicleDetails, description: inputText.trim() },\n        });\n        \n        return frameResponse({\n          image: `${frameHost}/api/images/preview?url=${encodeURIComponent(sessionData.imageUrl)}`,\n          postUrl: `${frameHost}/api/vehicle-details`,\n          buttons: ['Continue'],\n          input: { text: 'Enter vehicle type/model' },\n          state: { sessionId, step: 'vehicleType' },\n        });\n      } else {\n        return frameResponse({\n          image: `${frameHost}/api/images/preview?url=${encodeURIComponent(sessionData.imageUrl)}`,\n          postUrl: `${frameHost}/api/vehicle-details`,\n          buttons: ['Continue'],\n          input: { text: 'Enter vehicle description' },\n          state: { sessionId, step: 'details' },\n        });\n      }\n    } else if (step === 'vehicleType') {\n      // Second step: Vehicle type/model\n      if (inputText && inputText.trim()) {\n        await updateSessionData(sessionId, {\n          vehicleDetails: { ...sessionData.vehicleDetails, vehicleType: inputText.trim() },\n        });\n        \n        return frameResponse({\n          image: `${frameHost}/api/images/preview?url=${encodeURIComponent(sessionData.imageUrl)}`,\n          postUrl: `${frameHost}/api/vehicle-details`,\n          buttons: ['Continue'],\n          input: { text: 'Enter location where photo was taken' },\n          state: { sessionId, step: 'location' },\n        });\n      } else {\n        return frameResponse({\n          image: `${frameHost}/api/images/preview?url=${encodeURIComponent(sessionData.imageUrl)}`,\n          postUrl: `${frameHost}/api/vehicle-details`,\n          buttons: ['Continue'],\n          input: { text: 'Enter vehicle type/model' },\n          state: { sessionId, step: 'vehicleType' },\n        });\n      }\n    } else if (step === 'location') {\n      // Third step: Location\n      if (inputText && inputText.trim()) {\n        await updateSessionData(sessionId, {\n          vehicleDetails: { ...sessionData.vehicleDetails, location: inputText.trim() },\n          step: 'confirm',\n        });\n        \n        // Load the updated session data\n        const updatedSessionData = await getSessionData(sessionId);\n        \n        if (!updatedSessionData || !updatedSessionData.vehicleDetails) {\n          return frameResponse({\n            image: `${frameHost}/api/images/error`,\n            postUrl: `${frameHost}/api/capture-choice`,\n            buttons: ['Start Over'],\n          });\n        }\n        \n        // Move to confirmation step\n        return frameResponse({\n          image: `${frameHost}/api/images/confirmation?sessionId=${encodeURIComponent(sessionId)}`,\n          postUrl: `${frameHost}/api/submit`,\n          buttons: ['Submit', 'Edit Details'],\n          state: { sessionId },\n        });\n      } else {\n        return frameResponse({\n          image: `${frameHost}/api/images/preview?url=${encodeURIComponent(sessionData.imageUrl)}`,\n          postUrl: `${frameHost}/api/vehicle-details`,\n          buttons: ['Continue'],\n          input: { text: 'Enter location where photo was taken' },\n          state: { sessionId, step: 'location' },\n        });\n      }\n    }\n\n    // Default response\n    return frameResponse({\n      image: `${frameHost}/api/images/preview?url=${encodeURIComponent(sessionData.imageUrl)}`,\n      postUrl: `${frameHost}/api/vehicle-details`,\n      buttons: ['Continue'],\n      input: { text: 'Enter vehicle description' },\n      state: { sessionId, step: 'details' },\n    });\n  } catch (error) {\n    console.error('Error in vehicle-details endpoint:', error);\n    return errorResponse('An error occurred. Please try again later.', 500);\n  }\n}