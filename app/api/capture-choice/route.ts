import { NextRequest } from 'next/server';\nimport { validateFrameMessage, frameResponse, errorResponse, storeSessionData, ratelimit } from '@/lib/utils';\n\nexport const runtime = 'edge';\n\nexport async function POST(req: NextRequest) {\n  try {\n    // Apply rate limiting\n    const ip = req.headers.get('x-forwarded-for') || 'anonymous';\n    const { success: ratelimitSuccess } = await ratelimit.limit(ip);\n    \n    if (!ratelimitSuccess) {\n      return errorResponse('Rate limit exceeded. Please try again later.', 429);\n    }\n\n    // Get frame message from the request body\n    const body = await req.json();\n    const frameMessage = await validateFrameMessage(body);\n\n    if (!frameMessage) {\n      return errorResponse('Invalid frame message');\n    }\n\n    const { untrustedData } = frameMessage;\n    const { fid, buttonIndex } = untrustedData;\n    const frameHost = process.env.FRAME_HOST || 'https://unique-vehicles-frame.vercel.app';\n    \n    // Process button clicks\n    if (buttonIndex === 1) {\n      // Camera option selected\n      await storeSessionData(fid, { step: 'capture' });\n      \n      return frameResponse({\n        image: `${frameHost}/api/images/camera-frame`,\n        postUrl: `${frameHost}/api/upload-image`,\n        buttons: ['Take Photo'],\n        input: { text: 'Or paste an image URL here' },\n        state: { mode: 'camera', sessionId: `session:${fid}:${Date.now()}` },\n      });\n    } else if (buttonIndex === 2) {\n      // Upload option selected\n      await storeSessionData(fid, { step: 'upload' });\n      \n      return frameResponse({\n        image: `${frameHost}/api/images/upload-frame`,\n        postUrl: `${frameHost}/api/upload-image`,\n        buttons: ['Upload Photo'],\n        input: { text: 'Paste an image URL here' },\n        state: { mode: 'upload', sessionId: `session:${fid}:${Date.now()}` },\n      });\n    }\n\n    // Default response if no button was pressed\n    return frameResponse({\n      image: `${frameHost}/api/og`,\n      postUrl: `${frameHost}/api/capture-choice`,\n      buttons: ['üì∑ Capture Photo', 'üñºÔ∏è Upload Photo'],\n    });\n  } catch (error) {\n    console.error('Error in capture-choice endpoint:', error);\n    return errorResponse('An error occurred. Please try again later.', 500);\n  }\n}